
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> rm(list=ls(all=TRUE))
> 
> 
> #setwd("D:\\GitHub\\powerfamily")
> require(Matrix)
Loading required package: Matrix
Loading required package: lattice
> 
> # Source files with tool functions.
> source("O_utilities.R")
> 
> # Main program
> source("M_GCDpower.R")
> # Prediction, plot
> source("M_p.GCDpower.R")
> # KKT checking, CV
> source("M_cv.GCDpower.R")
> # coefficients
> source("M_coef.GCDpower.R")
> 
> 
> # dyn.load("M_powerfamilyNET.dll")
> dyn.load("M_powerfamilyNET.so")
> 
> args=(commandArgs(TRUE))
> if(length(args)==0){
+   print("No arguments supplied.")
+ }else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> print(qv)
[1] 0.5
> load("breast.rda")
> y = c(-1,1)[as.factor(y)]
> 
> 
> if(!exists('st'))
+ {
+   st = 1
+ }
> if(!exists('en'))
+ {
+   en = 1
+ }
> 
> 
> nrep = 100
> set.seed(1234)
> seed = sample((1:nrep) + 2001, nrep)
> 
> if(st == 1)
+ {
+   ans = matrix(0, 7, nrep)
+   time = matrix(0, 7, nrep)
+   nzo = matrix(0, 7, nrep)
+ } else
+ {
+   load(paste("q=", qv, "_ans.rda", sep=""))
+   load(paste("q=", qv, "_time.rda", sep=""))
+   load(paste("q=", qv, "_nzo.rda", sep=""))
+ }
> 
> 
> 
> 
> for (j in st:en){
+   print(paste("q =", qv, "j =", j))
+   write.csv(NA, file=paste("q_", qv, "_j_", j, ".csv", sep=""))
+   i = 1
+   set.seed(seed[j])
+   index = sample(1:nrow(x),as.integer(nrow(x)/5),replace=F) 
+   test_x = x[index,]
+   test_y = y[index]
+   train_x = x[-index,]
+   train_y = y[-index]
+   for(lambda2 in c(1e-4,1e-3,1e-2,1e-1,1,5,10)){
+     tim = system.time(cv<-cv.GCDpower(train_x, train_y, eps=1e-8, qv=qv, delta=2,
+                                       lambda2=lambda2, method="power",
+                                       pred.loss="misclass", nfolds=5))[3]
+     coef.cvs = coef(cv, s="lambda.1se")[-1,]
+     nzov= length(coef.cvs[coef.cvs != 0])
+     pre = predict(cv$GCDpower.fit, newx = test_x, s = cv$lambda.1se, type = "class" )
+     error = (test_y != pre) 
+     nzo[i,j] = nzov
+     time[i,j] = tim
+     ans[i,j] = res = mean(error)
+     i = i + 1
+   }
+   save(ans, file=paste("q=", qv, "_ans.rda", sep=""))
+   save(nzo, file=paste("q=", qv, "_nzo.rda", sep=""))
+   save(time, file=paste("q=", qv, "_time.rda", sep=""))
+ }
[1] "q = 0.5 j = 80"
[1] "q = 0.5 j = 81"
[1] "q = 0.5 j = 82"
[1] "q = 0.5 j = 83"
[1] "q = 0.5 j = 84"
[1] "q = 0.5 j = 85"
[1] "q = 0.5 j = 86"
[1] "q = 0.5 j = 87"
[1] "q = 0.5 j = 88"
[1] "q = 0.5 j = 89"
[1] "q = 0.5 j = 90"
[1] "q = 0.5 j = 91"
[1] "q = 0.5 j = 92"
[1] "q = 0.5 j = 93"
[1] "q = 0.5 j = 94"
[1] "q = 0.5 j = 95"
[1] "q = 0.5 j = 96"
[1] "q = 0.5 j = 97"
[1] "q = 0.5 j = 98"
[1] "q = 0.5 j = 99"
[1] "q = 0.5 j = 100"
> (ans.avg = apply(ans,1,mean)*100)
[1] 20.500 18.625 17.500 18.250 19.750 21.875 24.250
> (nzo.avg = apply(nzo,1,mean))
[1]   7.08   8.26  11.97  14.16  25.63  88.16 140.55
> (time.avg = apply(time,1,mean))
[1]  32.09600  32.01046  37.39714  65.45766 143.07667 202.94381 210.00043
> 
> save(ans.avg, file=paste("ans", qv, ".rda", sep=""))
> save(nzo.avg, file=paste("nzo", qv, ".rda", sep=""))
> save(time.avg, file=paste("time", qv, ".rda", sep=""))
> 
> 
> proc.time()
     user    system   elapsed 
16019.216     1.448 16038.754 
