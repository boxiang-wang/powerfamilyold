
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls(all=TRUE))
> 
> load("chess.rda")
> y = c(-1,1)[as.factor(y)]
> x$V13 = ifelse(x$V13 =="l", 1, 0)
> x$V37 = ifelse(x$V15==1,1,0)
> x$V38 = ifelse(x$V15=='w',1,0)
> #x$V39 = ifelse(x$V15=='b',1,0)
> x = x[, -15]
> 
> #setwd("D:\\GitHub\\powerfamily")
> require(Matrix)
Loading required package: Matrix
Loading required package: lattice
> 
> # Source files with tool functions.
> source("O_utilities.R")
> 
> # Main program
> source("M_GCDpower.R")
> # Prediction, plot
> source("M_p.GCDpower.R")
> # KKT checking, CV
> source("M_cv.GCDpower.R")
> # coefficients
> source("M_coef.GCDpower.R")
> 
> 
> # dyn.load("M_powerfamilyNET.dll")
> dyn.load("M_powerfamilyNET.so")
> 
> args=(commandArgs(TRUE))
> if(length(args)==0){
+   print("No arguments supplied.")
+ }else{
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   }
+ }
> 
> print(qv)
[1] 0.5
> if(!exists('st'))
+ {
+   st = 1
+ }
> if(!exists('en'))
+ {
+   en = 1
+ }
> 
> 
> if(!exists('nrep'))
+ {
+   nrep = 10
+ }
> 
> set.seed(1234)
> seed = sample((1:nrep) + 2001, nrep)
> 
> if(st == 1)
+ {
+   ans = matrix(0, 7, nrep)
+   time = matrix(0, 7, nrep)
+   nzo = matrix(0, 7, nrep)
+ } else
+ {
+   load(paste("q=", qv, "_ans.rda"))
+   load(paste("q=", qv, "_time.rda"))
+   load(paste("q=", qv, "_nzo.rda"))
+ }
> 
> 
> 
> write.csv(NA, file=paste("q_", qv, "_j_", 0, ".csv", sep=""))
> for (j in st:en){
+   print(paste("q =", qv, "j =", j))
+   write.csv(NA, file=paste("q_", qv, "_j_", j, ".csv", sep=""))
+   file.remove(paste("q_", qv, "_j_", (j-1), ".csv", sep=""))
+   i = 1
+   set.seed(seed[j])
+   index = sample(1:nrow(x),as.integer(nrow(x)/5),replace=F) 
+   test_x = x[index,]
+   test_y = y[index]
+   train_x = x[-index,]
+   train_y = y[-index]
+   for(lambda2 in c(1e-4,1e-3,1e-2,1e-1,1,5,10)){
+     tim = system.time(cv<-cv.GCDpower(train_x, train_y, eps=1e-8, qv=qv, delta=2,
+                                       lambda2=lambda2, method="power",
+                                       pred.loss="misclass", nfolds=5))[3]
+     coef.cvs = coef(cv, s="lambda.1se")[-1,]
+     nzov= length(coef.cvs[coef.cvs != 0])
+     pre = predict(cv$GCDpower.fit, newx = test_x, s = cv$lambda.1se, type = "class" )
+     error = (test_y != pre) 
+     nzo[i,j] = nzov
+     time[i,j] = tim
+     ans[i,j] = res = mean(error)
+     i = i + 1
+   }
+   save(ans, file=paste("q=", qv, "_ans.rda", sep=""))
+   save(nzo, file=paste("q=", qv, "_nzo.rda", sep=""))
+   save(time, file=paste("q=", qv, "_time.rda", sep=""))
+ }
[1] "q = 0.5 j = 1"
[1] "q = 0.5 j = 2"
[1] "q = 0.5 j = 3"
[1] "q = 0.5 j = 4"
[1] "q = 0.5 j = 5"
[1] "q = 0.5 j = 6"
[1] "q = 0.5 j = 7"
[1] "q = 0.5 j = 8"
[1] "q = 0.5 j = 9"
[1] "q = 0.5 j = 10"
> (ans.avg = apply(ans,1,mean)*100)
[1]  2.926448  3.333333  4.303599  6.369327  7.464789 26.306729 46.791862
> (nzo.avg = apply(nzo,1,mean))
[1] 30.2 29.7 27.2 10.3 13.9 34.1 24.6
> (time.avg = apply(time,1,mean))
[1] 2160.3698  535.2869   99.7840   16.1548    3.4298    3.2645    2.4928
> 
> save(ans.avg, file=paste("ans", qv, ".rda", sep=""))
> save(nzo.avg, file=paste("nzo", qv, ".rda", sep=""))
> save(time.avg, file=paste("time", qv, ".rda", sep=""))
> 
> 
> proc.time()
     user    system   elapsed 
28105.909     0.655 28216.435 
