data(promotergene)
install.packages("DWD")
require(DWD)
kdwd(y~.,data=FHT,C=100,scaled=TRUE)
gene <- kdwd(Class~.,data=promotergene,C=100,scaled=TRUE,cross=5)
gene@fitted
require(DWD)
install.packages("DWD")
require(DWD)
library(DWD)
require(DWD)
library(DWD)
install.packages("DWD")
library(DWD)
kdwd(y~.,data=FHT,C=100,scaled=TRUE)
gene <- kdwd(Class~.,data=promotergene,C=100,scaled=TRUE,cross=5)
gene@fitted
data(promotergene)
gene <- kdwd(Class~.,data=promotergene,C=100,scaled=TRUE,cross=5)
gene@fitted
promotergene
m = gcdnet(x=promotergene[,2:58],y=promotergene$Class,delta=2,method=c("hhsvm"))
library(gcdnet)
m = gcdnet(x=promotergene[,2:58],y=promotergene$Class,delta=2,method=c("hhsvm"))
gene <- kdwd(Class~.,data=FHT,C=100,scaled=TRUE,cross=5)
data(FHT)
gene <- kdwd(Class~.,data=FHT,C=100,scaled=TRUE,cross=5)
gene <- kdwd(y~.,data=FHT,C=100,scaled=TRUE,cross=5)
data(spam)
spam
gene <- kdwd(spam~.,data=spam,C=100,scaled=TRUE,cross=5)
gene <- kdwd(type~.,data=spam,C=100,scaled=TRUE,cross=5)
rm(list=ls(all=TRUE))
setwd("D:\\GitHub\\powerfamily")
require(Matrix)
source("GCDpower.R")
source("utilities.R")
source("p.GCDpower.R")
source("tools.GCDpower.R")
source("coef.GCDpower.R")
dyn.load("powerfamilyNET.dll")
dyn.load("hsvmlassoNET.dll")
load("FHT.rda")
library(DWD)
data(spam)
nobs.spam=nrow(spam)
spam$y=ifelse(spam$type == "spam",1,-1)
index=sample.int(nobs.spam,300)
dat = spam[index,]
x=dat[,1:57]
start1=Sys.time()
m1 <- gcdnetpower(x=x,y=dat$y,
#lambda=c(0.5,0.1),
lambda2=0, delta=2,method="hhsvm")
set.seed(123)
load("FHT.rda")
index = sample.int(50,50)
train.index = index[1:40]
test.index = index[41:50]
rm(list=ls(all=TRUE))
setwd("D:\\GitHub\\powerfamily")
require(Matrix)
source("GCDpower.R")
source("utilities.R")
source("p.GCDpower.R")
source("tools.GCDpower.R")
source("coef.GCDpower.R")
dyn.load("powerfamilyNET.dll")
dyn.load("hsvmlassoNET.dll")
load("FHT.rda")
LIBRARY(DWD)
library(DWD)
set.seed(123)
index=sample.int(nobs.spam,300)
library(DWD)
data(spam)
nobs.spam=nrow(spam)
spam$y=ifelse(spam$type == "spam",1,-1)
index=sample.int(nobs.spam,300)
dat = spam[index,]
x=dat[,1:57]
set.seed(123)
index=sample.int(nobs.spam,300)
dat = spam[index,]
index = sample.int(300,300)
folderind=rep(1:5,each=60)
train.index = index[folderind!=5]
test.index = index[folderind==5]
train.x = dat[train.index,1:57]; train.y = dat$y[train.index]
test.x = dat[test.index,1:57]; test.y = dat$y[test.index]
qv.seq=c(0.01,0.5,1,2,5,100)
qv.length=length(qv.seq)
lambda.seq=c(0.1,0.15,0.2,0.3,0.5)
lambda.length=length(lambda.seq)
l = matrix(NA, qv.length, lambda.length)
misclassrate = matrix(NA, qv.length, lambda.length)
nonzerobeta = matrix(NA, qv.length, lambda.length)
start1=Sys.time()
for(i in 1:qv.length)
{
print(i)
m = gcdnetpower(x=train.x,y=train.y,
#lambda=lambda.seq,
lambda2=0, delta=qv.seq[i], qv=qv.seq[i], method="power",nlambda=100)
for(j in 1:lambda.length)
{
pred=predict(m, lambda.seq[j],newx=test.x)
l[i,j]=j
misclassrate[i,j] = as.numeric(colSums(pred != test.y))/length(test.y)
nonzerobeta[i,j] = sum(coef(m, s=lambda.seq[j])[-1,]!=0)
}
}
a=cbind(c(NA,qv.seq),rbind(lambda.seq,misclassrate))
b=cbind(c(NA,qv.seq),rbind(lambda.seq,nonzerobeta))
stop1=Sys.time()
difftime(stop1, start1, units="secs")
a
b
0.233*300
misclassrate*300
a=cbind(c(NA,qv.seq),rbind(lambda.seq,misclassrate*300))
b=cbind(c(NA,qv.seq),rbind(lambda.seq,nonzerobeta))
powera=a
powerb=b
difftime(stop1, start1, units="secs")
powerdtime = difftime(stop1, start1, units="secs")
powerdtime
qv.seq
sort(qv.seq)
sort(qv.seq,F)
sort(qv.seq,T)
qv.seq=sort(qv.seq,T)
a
powera
b
powerb
qv.seq=c(0.01,0.5,1,2,5,100)
qv.seq=c(0.01,0.5,1,2,5,100)
qv.seq=sort(qv.seq,T)
qv.length=length(qv.seq)
lambda.seq=c(0.1,0.15,0.2,0.3,0.5)
lambda.length=length(lambda.seq)
l = matrix(NA, qv.length, lambda.length)
misclassrate = matrix(NA, qv.length, lambda.length)
nonzerobeta = matrix(NA, qv.length, lambda.length)
start1=Sys.time()
for(i in 1:qv.length)
{
print(i)
m = gcdnetpower(x=train.x,y=train.y,
#lambda=lambda.seq,
lambda2=0, delta=qv.seq[i], qv=qv.seq[i], method="hhsvm",nlambda=100)
for(j in 1:lambda.length)
{
pred=predict(m, lambda.seq[j],newx=test.x)
l[i,j]=j
misclassrate[i,j] = as.numeric(colSums(pred != test.y))/length(test.y)
nonzerobeta[i,j] = sum(coef(m, s=lambda.seq[j])[-1,]!=0)
}
}
a=cbind(c(NA,qv.seq),rbind(lambda.seq,misclassrate*300))
b=cbind(c(NA,qv.seq),rbind(lambda.seq,nonzerobeta))
stop1=Sys.time()
difftime(stop1, start1, units="secs")
a
b
test.y
length(test.y)
a=cbind(c(NA,qv.seq),rbind(lambda.seq,misclassrate*60))
b=cbind(c(NA,qv.seq),rbind(lambda.seq,nonzerobeta))
hhsvma = a
hhsvmb = b
hhsvmdtime
powerdtime
hhsvmdtime = difftime(stop1, start1, units="secs")
hhsvma = a
hhsvmb = b
hhsvmdtime
dim(FHT)
fix(FHT)
dim(FHT$x)
dim(FHT$y)
powera
powerb
powera/300
hhsvma
powerb
hhsvmb
powera
powerb
hhsvma
hhsvmb
hhsvma/60
head(spam)
?spam
str(spam)
head(spam)
head(spam)
head(spam)
head(spam)
head(spam)
head(spam)
head(spam)
head(spam)
head(spam)
head(spam)
qv.seq=c(0.01,0.5,1,2,5,100)
i=6
print(i)
m = gcdnetpower(x=train.x,y=train.y,
#lambda=lambda.seq,
lambda2=0, delta=qv.seq[i], qv=qv.seq[i], method="power",nlambda=100)
hhsvmtimg
fix(powerdtime)
hhsvmdtime
powerdtime
4358.394/72.45
plot(m)
plot(m,color=T
)
pdf('spampower_q_1_l_2.pdf', 9, 6)
plot(m, color=T, main="q=1, lambda2=1")
dev.off()
coef(m)
m1 = gcdnetpower(x=train.x,y=train.y,
#lambda=lambda.seq,
lambda2=0, delta=qv.seq[i], qv=100, method="power",nlambda=100)
pdf('spampower_q_100.pdf', 9, 6)
plot(m1, color=T, main="q=100")
dev.off()
m2 = gcdnetpower(x=train.x,y=train.y,
#lambda=lambda.seq,
lambda2=0, delta=0.01, qv=1, method="delta",nlambda=100)
pdf('spamhhsvm_d_001.pdf', 9, 6)
plot(m2, color=T, main="delta=0.01")
dev.off()
m2 = gcdnetpower(x=train.x,y=train.y,
#lambda=lambda.seq,
lambda2=0, delta=0.01, qv=1, method="hhsvm",nlambda=100)
pdf('spamhhsvm_d_001.pdf', 9, 6)
plot(m2, color=T, main="delta=0.01")
dev.off()
m00 = gcdnetpower(x=train.x,y=train.y,
#lambda=lambda.seq,
lambda2=0, delta=qv.seq[i], qv=1, method="power",nlambda=100)
pdf('spam_q_1.pdf', 9, 6)
plot(m00, color=T, main="q=1"))
dev.off()
m01 = gcdnetpower(x=train.x,y=train.y,
#lambda=lambda.seq,
lambda2=1, delta=qv.seq[i], qv=1, method="power",nlambda=100)
pdf('spampower_q_1_l_2.pdf', 9, 6)
plot(m01, color=T, main="q=1, lambda2=1")
dev.off()
coef(m)
plot(m01, color=T, main="q=1, lambda2=1")
plot(m01, color=T, main="q=1, lambda2=1")
plot(m00, color=T, main="q=1"))
plot(m00, color=T, main="q=1")
dev.off()
dev.off()
pdf('spampower_q_1_l_2.pdf', 9, 6)
plot(m01, color=T, main="q=1, lambda2=1")
dev.off()
pdf('spampower_q_1_l_2.pdf', 9, 6)
plot(m01, color=T, main="q=1, lambda2=1")
dev.off()
dev.off()
dev.off()
pdf('spam_q_1.pdf', 9, 6)
plot(m00, color=T, main="q=1")
dev.off()
plot(m00, color=T, main="q=1")
pdf('spampower_q_1.pdf', 9, 6)
plot(m00, color=T, main="q=1")
dev.off()
