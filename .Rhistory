rm(list=ls(all=TRUE))
setwd("D:\\GitHub\\powerfamily")
x_log <- matrix(rnorm(100*10),100,10)
y_log <- sample(c(-1,1),100,replace=TRUE)
x = x_log
y = y_log
np <- dim(x)
nobs <- as.integer(np[1])
nvars <- as.integer(np[2])
vnames <- colnames(x)
nlambda = 100
lambda.factor = ifelse(nobs < nvars, 0.01,1e-04)
lambda = c(0.5,0.1)
lambda2 = 0.3
pf = rep(1, nvars)
pf2 = rep(1, nvars)
#exclude,
dfmax = nvars + 1
pmax = min(dfmax * 1.2, nvars)
standardize = TRUE
eps = 1e-08
maxit = 1e+06
delta = 2
if (is.null(vnames))
vnames <- paste("V", seq(nvars), sep = "")
#parameter setup
if (length(pf) != nvars)
stop("The size of L1 penalty factor must be same as the number of input variables")
if (length(pf2) != nvars)
stop("The size of L2 penalty factor must be same as the number of input variables")
if (lambda2 < 0)
stop("lambda2 must be non-negative")
maxit <- as.integer(maxit)
lam2 <- as.double(lambda2)
pf <- as.double(pf)
pf2 <- as.double(pf2)
isd <- as.integer(standardize)
isd = 0
isd = as.integer(isd)
eps <- as.double(eps)
dfmax <- as.integer(dfmax)
pmax <- as.integer(pmax)
jd <- as.integer(0)
#################################################################################
#lambda setup
nlam <- as.integer(nlambda)
if (is.null(lambda)) {
if (lambda.factor >= 1)
stop("lambda.factor should be less than 1")
flmin <- as.double(lambda.factor)
ulam <- double(1)
} else {
#flmin=1 if user define lambda
flmin <- as.double(1)
if (any(lambda < 0))
stop("lambdas should be non-negative")
ulam <- as.double(rev(sort(lambda)))
nlam <- as.integer(length(lambda))
}
#################################################################################
#data setup
y <- as.factor(y)
y <- c(-1, 1)[as.numeric(y)]
if (!all(y %in% c(-1, 1)))
stop("y should be a factor with two levels")
if (delta < 0)
stop("delta must be non-negative")
delta <- as.double(delta)
source("plot.gcdnet.R")
source("utilities.R")
require(Matrix)
dyn.load("hsvmlassoNET.dll")
#dyn.unload("hsvmlassoNET.dll")
# del hsvmlassoNETn.dll hsvmlassoNETn.o
# Rcmd SHLIB hsvmlassoNETn.f90 auxiliary.f90 -o hsvmlassoNETn.dll
delta=0.5
fit <- .Fortran("hsvmlassoNET", delta, lam2, nobs, nvars,
as.double(x), as.double(y), jd, pf, pf2, dfmax, pmax, nlam,
flmin, ulam, eps, isd, maxit, nalam = integer(1), b0 = double(nlam),
beta = double(pmax * nlam), ibeta = integer(pmax), nbeta = integer(nlam),
alam = double(nlam), npass = integer(1), jerr = integer(1))
#################################################################################
# output
fit <- getoutput(fit, maxit, pmax, nvars, vnames)
fit <- c(fit, list(npasses = fit$npass, jerr = fit$jerr))
class(fit) <- c("hsvmpath")
if (is.null(lambda))
fit$lambda <- lamfix(fit$lambda)
#fit$call <- this.call
#################################################################################
class(fit) <- c("gcdnet", class(fit))
fit
rm(list=ls(all=TRUE))
setwd("D:\\GitHub\\powerfamily")
source("GCDpower.R")
source("utilities.R")
source("plot.gcdnet.R")
require(Matrix)
source('gcdnet.R')
dyn.load("powerfamilyNET.dll")
dyn.load("hsvmlassoNET.dll")
x_log <- matrix(rnorm(100*10),100,10)
y_log <- sample(c(-1,1),100,replace=TRUE)
m <- gcdnetpower(x=x_log,y=y_log,lambda2=0,method="hhsvm")
plot(m)
m <- gcdnetpower(x=x_log,y=y_log,lambda2=0,method="power")
rm(list=ls(all=TRUE))
setwd("D:\\GitHub\\powerfamily")
source("GCDpower.R")
source("utilities.R")
source("plot.gcdnet.R")
require(Matrix)
source('gcdnet.R')
source("hsvmpath.R")
dyn.load("powerfamilyNET.dll")
dyn.load("hsvmlassoNET.dll")
x_log <- matrix(rnorm(100*10),100,10)
y_log <- sample(c(-1,1),100,replace=TRUE)
# LASSO
m <- gcdnetpower(x=x_log,y=y_log,lambda2=0,method="hhsvm")
plot(m)
m <- gcdnetpower(x=x_log,y=y_log,lambda2=0,method="power")
plot(m)
rm(list=ls(all=TRUE))
setwd("D:\\GitHub\\powerfamily")
source("GCDpower.R")
source("utilities.R")
source("plot.gcdnet.R")
require(Matrix)
source("hsvmpath.R")
dyn.load("powerfamilyNET.dll")
dyn.load("hsvmlassoNET.dll")
x_log <- matrix(rnorm(100*10),100,10)
y_log <- sample(c(-1,1),100,replace=TRUE)
# LASSO
m <- gcdnetpower(x=x_log,y=y_log,lambda2=0,method="hhsvm")
plot(m)
m <- gcdnetpower(x=x_log,y=y_log,lambda2=0,method="power")
plot(m)
