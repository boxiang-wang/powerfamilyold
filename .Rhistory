fit1 <- c(fit1, list(npasses = fit1$npass, jerr = fit1$jerr))
class(fit1) <- c("powerfamilyNET")
if (is.null(lambda))
fit1$lambda <- lamfix(fit1$lambda)
#fit$call <- this.call
#################################################################################
class(fit1) <- c("gcdnet", class(fit1))
#fit1
plot.gcdnet(fit1)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
plot.gcdnet(fit1)
plot.gcdnet(fit1.int)
fit$beta
fit1$beta
dim(fit1$beta)
dim(fit1.int$beta)
(fit1.int$beta)-(fit1.int$beta)
max((fit1.int$beta)-(fit1.int$beta))
start1 = Sys.time()
#################################################################################
qv = 2
qv = as.double(qv)
fit1 <- .Fortran("powerfamilyNET", qv, lam2, nobs, nvars,
as.double(x), as.double(y), jd, pf, pf2, dfmax, pmax, nlam,
flmin, ulam, eps, isd, maxit, nalam = integer(1), b0 = double(nlam),
beta = double(pmax * nlam), ibeta = integer(pmax), nbeta = integer(nlam),
alam = double(nlam), npass = integer(1), jerr = integer(1))
#################################################################################
# output
fit1 <- getoutput(fit1, maxit, pmax, nvars, vnames)
fit1 <- c(fit1, list(npasses = fit1$npass, jerr = fit1$jerr))
class(fit1) <- c("powerfamilyNET")
if (is.null(lambda))
fit1$lambda <- lamfix(fit1$lambda)
#fit$call <- this.call
#################################################################################
class(fit1) <- c("gcdnet", class(fit1))
#fit1
plot.gcdnet(fit1)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
#################################################################################
qv = 2
qv = as.integer(qv)
fit1.int <- .Fortran("powerfamilyintNET", qv, lam2, nobs, nvars,
as.double(x), as.double(y), jd, pf, pf2, dfmax, pmax, nlam,
flmin, ulam, eps, isd, maxit, nalam = integer(1), b0 = double(nlam),
beta = double(pmax * nlam), ibeta = integer(pmax), nbeta = integer(nlam),
alam = double(nlam), npass = integer(1), jerr = integer(1))
#################################################################################
# output
fit1.int <- getoutput(fit1.int, maxit, pmax, nvars, vnames)
fit1.int <- c(fit1.int, list(npasses = fit1.int$npass, jerr = fit1.int$jerr))
class(fit1.int) <- c("powerfamilyNET")
if (is.null(lambda))
fit1.int$lambda <- lamfix(fit1.int$lambda)
#fit1.int$call <- this.call
#################################################################################
class(fit1.int) <- c("gcdnet", class(fit1.int))
#fit1.int
plot.gcdnet(fit1.int)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
source("M_GCDpower.R")
dyn.load("M_powerfamilyNET.dll")
dyn.load("M_powerfamilyintNET.dll")
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2, method="power",eps=1e-8, standardize=F)
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2.1, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2.1, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2.1, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=1.5, thr=1e-03,
qv=2.1, loss = c("power"))
source("U_KKTcheckings.R")
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=1.5, thr=1e-03,
qv=2.1, loss = c("power"))
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, delta=2.1, method="hhsvm",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, delta=2.1, method="hhsvm",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
m$npass
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
m$npass
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, delta=2.1, method="hhsvm",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
m$npass
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, delta=1, method="hhsvm",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
m$npass
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=1, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, delta=0.25, method="hhsvm",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
tart1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2, method="power",eps=1e-8, standardize=F)
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, delta=2/9, method="hhsvm",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2.01, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=1.5, thr=1e-03,
qv=2.1, loss = c("power"))
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=1.5, thr=1e-03,
qv=2.01, loss = c("power"))
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2.00000001, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1.5, qv=2.001, method="power",eps=1e-8, standardize=F)
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
FHT = FHTgen(n=5000, p=100, rho=0.5)
dat = FHT
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=0, qv=1, method="power",eps=1e-8, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=1.5, thr=1e-02,
qv=2, loss = c("power"))
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0, thr=1e-02,
qv=1, loss = c("power"))
source("U_KKTcheckings.R")
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=0, qv=1, method="power",eps=1e-8, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0, thr=1e-02,
qv=1, loss = c("power"))
rm(list=ls(all=TRUE))
setwd("D:\\GitHub\\powerfamily")
require(Matrix)
# Source files with tool functions.
source("O_utilities.R")
# Main program
source("M_GCDpower.R")
# Source file of KKT
source("U_KKTcheckings.R")
# FORTRAN subroutines.
dyn.load("M_powerfamilyNET.dll")
dyn.load("M_powerfamilyintNET.dll")
# Source file of data generator
source("M_FHTgen.R")
FHT = FHTgen(n=5000, p=100, rho=0.5)
fix(FHT)
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=0, qv=1, method="power",eps=1e-8, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0, thr=1e-2,
qv=1, loss = c("power"))
dat = FHT
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=0, qv=1, method="power",eps=1e-8, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0, thr=1e-2,
qv=1, loss = c("power"))
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1, qv=2, method="power",eps=1e-8, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=1, thr=1e-4,
qv=2, loss = c("power"))
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1, qv=2, method="power",eps=1e-9, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=1, thr=1e-4,
qv=2, loss = c("power"))
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1, qv=2, method="power",eps=1e-6, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=1, thr=1e-4,
qv=2, loss = c("power"))
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1, qv=2, method="power",eps=1e-3, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=1, thr=1e-4,
qv=2, loss = c("power"))
rm(list=ls(all=TRUE))
ls()
require(Matrix)
# Source files with tool functions.
source("O_utilities.R")
# Main program
source("M_GCDpower.R")
# Source file of KKT
source("U_KKTcheckings.R")
# FORTRAN subroutines.
dyn.load("M_powerfamilyNET.dll")
dyn.load("M_powerfamilyintNET.dll")
# Source file of data generator
source("M_FHTgen.R")
FHT = FHTgen(n=5000, p=100, rho=0.5)
dat = FHT
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=1, qv=2, method="power",eps=1e-8, standardize=F)
plot(m)
class(m)
source("M_tools.GCDpower.R")
plot(m)
source("M_p.GCDpower.R")
plot(m)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=1, thr=1e-3,
qv=2, loss = c("power"))
source("U_KKTcheckings.R")
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=1, thr=1e-3,
qv=2, loss = c("power"))
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=1, thr=1e-3,
qv=2, loss = c("power"))
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=0.01, qv=2, method="power",eps=1e-7, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=1e-3,
qv=2, loss = c("power"))
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=0.002,
qv=2, loss = c("power"))
KKTperctg = function(dat, lambda2, qv, eps, thr)
{
if(eps > 1) eps = 10 ^ (-eps)
if(thr > 1) thr = 10 ^ (-thr)
m.temp = gcdnetpower(x=dat$x, y=dat$y,
lambda2=lambda2, qv=qv, method="power",eps=eps, standardize=F)
KKT(m.temp$b0, m.temp$beta, dat$y, dat$x, m.temp$lambda, lambda2=0, thr=thr,
qv=qv, loss = c("power"))
}
FHT = FHTgen(n=5000, p=100, rho=0.5)
dat = FHT
KKTperctg(dat, lambda2=0, qv=1, eps=1e-8, thr=1e-2)
FHT = FHTgen(n=5000, p=100, rho=0.5)
dat = FHT
KKTperctg(dat, lambda2=0, qv=1, eps=8, thr=3)
eps.list = c(6,7,8,9)
thr.list = c(2,3,4)
perct.tb = matrix(NA, length(thr.list), length(eps.list))
for(i in 1:length(eps.list))
{
for(j in 1:length(thr.list))
{
perct.tb[j, i] = KKTperctg(dat, lambda2=0, qv=1, eps=eps.list[i], thr=thr.list[j])
}
}
source("U_KKTcheckings.R")
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=0.002,
qv=2, loss = c("power"), print.out=T)
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=0.01, qv=2, method="power",eps=1e-7, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=0.002,
qv=2, loss = c("power"), print.out=T)
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=0.01, qv=2, method="power",eps=1e-7, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=0.001,
qv=2, loss = c("power"), print.out=T)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=0.01,
qv=2, loss = c("power"), print.out=T)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=1e-5,
qv=2, loss = c("power"), print.out=T)
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=0.01, qv=2, method="power",eps=1e-7, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=1e-5,
qv=2, loss = c("power"), print.out=T)
source("U_KKTcheckings.R")
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=0.01, qv=2, method="power",eps=1e-7, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=1e-5,
qv=2, loss = c("power"), print.out=T)
source("U_KKTcheckings.R")
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=0.01, qv=2, method="power",eps=1e-7, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=1e-5,
qv=2, loss = c("power"), print.out=T)
source("U_KKTcheckings.R")
m = gcdnetpower(x=dat$x, y=dat$y,
lambda2=0.01, qv=2, method="power",eps=1e-7, standardize=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=1e-5,
qv=2, loss = c("power"), print.out=T)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=1e-5,
qv=2, loss = c("power"), print.out=T)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=1e-5,
qv=2, loss = c("power"), print.out=F)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=1e-5,
qv=2, loss = c("power"), print.out=T)
KKT(m$b0, m$beta, dat$y, dat$x, m$lambda, lambda2=0.01, thr=1e-5,
qv=2, loss = c("power"), print.out=F)
KKTperctg = function(dat, lambda2, qv, eps, thr)
{
if(eps > 1) eps = 10 ^ (-eps)
if(thr > 1) thr = 10 ^ (-thr)
m.temp = gcdnetpower(x=dat$x, y=dat$y,
lambda2=lambda2, qv=qv, method="power",eps=eps, standardize=F)
KKT(m.temp$b0, m.temp$beta, dat$y, dat$x, m.temp$lambda, lambda2=0, thr=thr,
qv=qv, loss = c("power"), print.out=F)
}
FHT = FHTgen(n=5000, p=100, rho=0.5)
dat = FHT
KKTperctg(dat, lambda2=0, qv=1, eps=8, thr=3)
KKTperctg(dat, lambda2=0, qv=1, eps=8, thr=4)
KKTperctg(dat, lambda2=0, qv=1, eps=8, thr=3.5)
KKTperctg(dat, lambda2=0, qv=1, eps=8, thr=5)
KKTperctg(dat, lambda2=0, qv=1, eps=8, thr=3.2)
eps.list = c(5,6,7,8,9)
thr.list = c(2,3,4,5)
perct.tb = matrix(NA, length(thr.list), length(eps.list))
for(i in 1:length(eps.list))
{
for(j in 1:length(thr.list))
{
perct.tb[j, i] = KKTperctg(dat, lambda2=0, qv=1, eps=eps.list[i], thr=thr.list[j])
}
}
perct.tb
save("perct.tb", file="n5Kp100r05l20q1.rda")
set.seed(1234)
FHT = FHTgen(n=5000, p=100, rho=0.5)
dat = FHT
KKTperctg(dat, lambda2=0, qv=1, eps=8, thr=3)
getwd()
save("perct.tb", file=paste("D:\\GitHub\\powerfamily\\KKTrda\\"nm, ".rda", sep=""))
save("perct.tb", file=paste("D:\\GitHub\\powerfamily\\KKTrda\\", nm, ".rda", sep=""))
nm="n5Kp100r05l20q1"
save("perct.tb", file=paste("D:\\GitHub\\powerfamily\\KKTrda\\", nm, ".rda", sep=""))
save("perct.tb", file=paste("D:\\GitHub\\powerfamily\\Outputs\\KKTrda\\", nm, ".rda", sep=""))
save("perct.tb",
file=paste("D:\\GitHub\\powerfamily\\Outputs\\KKTrda\\", nm, ".rda", sep=""))
perct.tb
paste("10^-",eps.list)
paste("10^-",eps.list,sep="")
colname(perct.tb) = paste("10^-", eps.list, sep="")
rowname(perct.tb) = paste("10^-", thr.list, sep="")
colnames(perct.tb) = paste("10^-", eps.list, sep="")
rownames(perct.tb) = paste("10^-", thr.list, sep="")
perct.tb
colnames(perct.tb) = paste("1e-", eps.list, sep="")
rownames(perct.tb) = paste("1e-", thr.list, sep="")
perct.tb
save("perct.tb",
file=paste("D:\\GitHub\\powerfamily\\Outputs\\KKTrda\\", nm, ".rda", sep=""))
KKTtb(dat, lambda2=0.1, qv=1, nm="n5Kp100r05l201q1")
KKTtb = function(dat, lambda2, qv, nm, eps.list=c(5:9), thr.list=c(2:5))
{
colnames(perct.tb) = paste("1e-", eps.list, sep="")
rownames(perct.tb) = paste("1e-", thr.list, sep="")
perct.tb = matrix(NA, length(thr.list), length(eps.list))
for(i in 1:length(eps.list))
{
for(j in 1:length(thr.list))
{
perct.tb[j, i] = KKTperctg(dat, lambda2=lambda2, qv=qv, eps=eps.list[i], thr=thr.list[j])
}
}
save("perct.tb",
file=paste("D:\\GitHub\\powerfamily\\Outputs\\KKTrda\\", nm, ".rda", sep=""))
}
KKTtb(dat, lambda2=0.1, qv=1, nm="n5Kp100r05l201q1")
perct.tb
load("n5Kp100r05l201q1.rda")
perct.tb
file.loc = "D:\\GitHub\\powerfamily\\Outputs\\KKTrda\\"
KKTperctg = function(dat, lambda2, qv, eps, thr)
{
if(eps > 1) eps = 10 ^ (-eps)
if(thr > 1) thr = 10 ^ (-thr)
m.temp = gcdnetpower(x=dat$x, y=dat$y,
lambda2=lambda2, qv=qv, method="power",eps=eps, standardize=F)
KKT(m.temp$b0, m.temp$beta, dat$y, dat$x, m.temp$lambda, lambda2=lambda2, thr=thr,
qv=qv, loss = c("power"), print.out=F)
}
KKTtb = function(dat, lambda2, qv, nm, eps.list=c(5:9), thr.list=c(2:5),
file.loc = "D:\\GitHub\\powerfamily\\Outputs\\KKTrda\\")
{
perct.tb = matrix(NA, length(thr.list), length(eps.list))
colnames(perct.tb) = paste("1e-", eps.list, sep="")
rownames(perct.tb) = paste("1e-", thr.list, sep="")
for(i in 1:length(eps.list))
{
for(j in 1:length(thr.list))
{
perct.tb[j, i] = KKTperctg(dat, lambda2=lambda2, qv=qv, eps=eps.list[i], thr=thr.list[j])
}
}
save("perct.tb",
file=paste(file.loc, nm, ".rda", sep=""))
return(perct.tb)
}
set.seed(1234)
FHT = FHTgen(n=5000, p=100, rho=0.5)
dat = FHT
start1 = Sys.time()
KKTtb(dat, lambda2=0, qv=1, nm="n5Kp100r05l20q1")
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
KKTtb(dat, lambda2=1, qv=1, nm="n5Kp100r05l21q1")
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
KKTtb(dat, lambda2=0.1, qv=1, nm="n5Kp100r05l201q1")
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
KKTtb(dat, lambda2=0.1, qv=2, nm="n5Kp100r05l201q2")
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
KKTtb(dat, lambda2=1, qv=2, nm="n5Kp100r05l21q2")
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
KKTtb(dat, lambda2=0, qv=2, nm="n5Kp100r05l20q2")
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
start1 = Sys.time()
KKTtb(dat, lambda2=0, qv=0.5, nm="n5Kp100r05l20q05")
KKTtb = function(dat, lambda2, qv, nm, eps.list=c(5:9), thr.list=c(2:5),
file.loc = "D:\\GitHub\\powerfamily\\Outputs\\KKTrda\\")
{
perct.tb = matrix(NA, length(thr.list), length(eps.list))
colnames(perct.tb) = paste("1e-", eps.list, sep="")
rownames(perct.tb) = paste("1e-", thr.list, sep="")
for(i in 1:length(eps.list))
{
for(j in 1:length(thr.list))
{
print(i, j)
perct.tb[j, i] = KKTperctg(dat, lambda2=lambda2, qv=qv, eps=eps.list[i], thr=thr.list[j])
}
}
save("perct.tb",
file=paste(file.loc, nm, ".rda", sep=""))
return(perct.tb)
}
start1 = Sys.time()
KKTtb(dat, lambda2=0, qv=0.5, nm="n5Kp100r05l20q05")
print(3,4)
print(c(3,4))
KKTtb = function(dat, lambda2, qv, nm, eps.list=c(5:9), thr.list=c(2:5),
file.loc = "D:\\GitHub\\powerfamily\\Outputs\\KKTrda\\")
{
perct.tb = matrix(NA, length(thr.list), length(eps.list))
colnames(perct.tb) = paste("1e-", eps.list, sep="")
rownames(perct.tb) = paste("1e-", thr.list, sep="")
for(i in 1:length(eps.list))
{
for(j in 1:length(thr.list))
{
print(c(i, j))
perct.tb[j, i] = KKTperctg(dat, lambda2=lambda2, qv=qv, eps=eps.list[i], thr=thr.list[j])
}
}
save("perct.tb",
file=paste(file.loc, nm, ".rda", sep=""))
return(perct.tb)
}
start1 = Sys.time()
KKTtb(dat, lambda2=0, qv=0.5, nm="n5Kp100r05l20q05")
stop1 = Sys.time()
difftime(stop1, start1, units="secs")
